set-environment -g PATH "/opt/homebrew/bin:/usr/local/bin:/bin:/usr/bin:~/.cargo/bin:/usr/bin"

# Set the prefix key to C-a instead of the default C-b
unbind C-b
set -g prefix C-a
bind C-a send-prefix

set-option -g default-shell /bin/zsh
bind Tab last-window 

# if multiple clients area attached to the same window, maximize it to the bigger one 
set-window-option -g aggressive-resize

# Start windows and pane numbering from 1 instead of 0
set -g base-index 1
set -g pane-base-index 1

# re number windows when one is closed
set -g renumber-windows on 

# word separators for automatic word selection
setw -g word-separators ' @"()[]_-:,.'
setw -ag word-separators "'"

# show times longer than supposed
set -g display-panes-time 2000 

# tmux messages displaye for 4s 
set -g display-time 4000 

# n?vim compatibility
set-option -g default-terminal "xterm-256color"
set-option -ga terminal-overrides ",xterm-256color:Tc"
set -g default-terminal "screen-256color"

## Kanagawa
# thm_accent="#C4B28A"
# thm_bg="#181616"
# thm_fg="#9B9FA9"

## Poimandres
# thm_accent="#5DE4C7"
# thm_bg="#1B1E28"
# thm_fg="#E4F0FB"

## Gruvbox
thm_accent="#fabd2f"
thm_bg="#1d2021"
thm_fg="#E4F0FB"

## Everblush 
# thm_accent="#e5c76b"
# thm_bg="#141b1e"
# thm_fg="#dadada"

# Source file 
unbind r 
bind r source-file ~/.config/tmux/tmux.conf

# unbind C-d
#
# bind -n -N 'Detach or Exit' C-d if-shell -b '[ "$(tmux list-panes | wc -l)" -gt 1 ]' {
#   kill-pane
# } {
#   if-shell -b '[ #{session_windows} -lt 2 ]' {
#     detach-client
#   } {
#     kill-window
#   }
# }


bind-key C-h run-shell "tmux set-option -g status off;"
bind-key C-l run-shell "tmux set-option -g status on;"

# Hide status bar if only one window and one session

set-hook -g after-new-window 'if "[ #{session_windows} -gt 1 ]" "set -g status on"'
set-hook -g after-kill-pane 'if "[ #{session_windows} -lt 2 ]" "set -g status off"'
set-hook -g pane-exited 'if "[ #{session_windows} -lt 2 ]" "set -g status off"'
set-hook -g window-layout-changed 'if "[ #{session_windows} -lt 2 ]" "set -g status off"'
set-hook -g session-created 'if "[ #{session_windows} -lt 2 ]" "set -g status off"'
set-hook -g client-attached 'if "[ #{session_windows} -gt 1 ]" "set -g status on"'

# use vim keybindings in copy-mode
setw -g mode-keys vi

# Faster command seq
set -s escape-time 0

# have large history
set -g history-limit 5000

# Mouse mode on 
set -g mouse on 

# Border status for active pane
# set -g pane-border-status top
# set -g pane-border-format "#P: #{pane_current_command}"

# if-shell -F '#{==:#{session_name},scratchpad}' {
#   set -g pane-border-status off
# }

# set Title
set -g set-titles on 
set -g set-titles-string "#T"

# disabled activity monitoring
setw -g monitor-activity off
set -g visual-activity off

 # don't exit from tmux when closing a session
set -g detach-on-destroy off

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# equal resize all panes 
bind = select-layout even-horizontal
bind | select-layout even-vertical 

# unbind % 
# bind % split-window -h -c "#{pane_current_path}"
#
# unbind '"'
# bind '"' split-window -v -c "#{pane_current_path}"

unbind c
bind c new-window -c "#{pane_current_path}"

# resize panes 
bind J resize-pane -D 10 
bind K resize-pane -U 10 
bind H resize-pane -L 10 
bind L resize-pane -R 10 

# select panes
bind j select-pane -D 
bind k select-pane -U 
bind h select-pane -L 
bind l select-pane -R 

# Settings for VI mode selection in copy-mode
unbind [
bind Escape copy-mode
bind -T copy-mode-vi v send-keys -X begin-selection

unbind p
bind p paste-buffer

bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

unbind C-p
unbind C-o
unbind C-k
unbind C-x
unbind C-j
unbind C-g
unbind C-z
unbind v
unbind .
unbind d

bind b display-popup -T "BTOP" -E "btop"

# bind-key . display-popup -b heavy -T "Scratchpad" -d "#{pane_current_path}" -w '80%' -h '80%' -E 'zsh'
bind-key -n -N 'Toggle popup window' F12 if-shell -F '#{==:#{session_name},scratchpad}' {
  detach-client
} {
  display-popup -T Scratchpad -b heavy -d "#{pane_current_path}" -xC -yC -w80% -h75% -E 'tmux new-session -A -s scratchpad'
}

bind-key -N 'Rename Window' , command-prompt -I '#W' -p "name: " "rename-window '%%'" 

bind-key -N 'Open App' o command-prompt -p "open app: " "new-window -c \"#{pane_current_path}\" '%%'"
bind-key -N 'Open App in HSplit' O command-prompt -p "open app: " "split-pane -h -c \"#{pane_current_path}\" '%%'"

bind-key -N 'Lazygit' g new-window -n lazygit -c "#{pane_current_path}" "lazygit" 
bind-key -N 'Lazygit Split' G split-pane -h -c "#{pane_current_path}" "lazygit" 
bind-key -N 'Lazygit Popup' C-g display-popup -b heavy -S '#[bg=#ffc000]' -d "#{pane_current_path}" -T "LazyGit" -w '50%' -h '75%'  -E "lazygit"

bind-key -N 'Neovim Settings' v new-window -n vim-config -c "$HOME/.config/astronvim/lua/user" "nvim"
bind-key -N 'Neovim Settings Split' V split-pane -h -c "$HOME/.config/astronvim/lua/user" "nvim"

bind-key -N 'Tmux Settings' t new-window -n tmux-config -c "$HOME" "nvim .config/tmux/tmux.conf"
bind-key -N 'Tmux Settings Split' T split-pane -h -c "$HOME" "nvim .config/tmux/tmux.conf"

bind-key -N 'Wezterm Settings' w new-window -n wez-config -c "$HOME" "nvim .wezterm.lua"
bind-key -N 'Wezterm Settings Split' W split-pane -h -c "$HOME" "nvim .wezterm.lua"


# join panes
bind-key -N 'Join Panes' C-@ choose-window 'join-pane -s "%%"'

# swap panes
unbind S
bind-key -N 'Swap Panes' S choose-window 'swapp -s "%%"'


set-option -g status-position top
set-option -g status off

# wezterm integration of folke/zen-mode.nvim
set-option -g allow-passthrough on

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'o0th/tmux-nova'
set -g @plugin 'swaroopch/tmux-pomodoro'



set -g @nova-status-style-bg "$thm_bg"
set -g @nova-status-style-fg "$thm_fg"
set -g @nova-status-style-active-bg "$thm_accent"
set -g @nova-status-style-active-fg "$thm_bg"

set -g @nova-pane "#I #W"

# this will create a new segment named 'custom'
set -g @nova-segment-custom "custom-segment"
set -g @nova-segment-custom-colors "$thm_accent $thm_bg"

# this will position the custom segment on the right side
set -g @nova-segments-0-left ""
set -g @nova-segments-0-right "custom"

set -g @continuum-restore 'on'
set -g @resurrect-strategy-nvim 'session'

run '~/.config/tmux/plugins/tpm/tpm'
